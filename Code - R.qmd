---
title: "Systems Genomics"
author: "Julia Frank, Masja Hoogendoorn, Zoe Marolf "
date: today
format: 
    html:
        self-contained: true
        toc: true
editor_options: 
    chunk_output_type: console
---

## **Load packages**

```{r}
library(ggplot2)
```

## Overview data

-   L1 stage larvae: SRR1197426 = L1.1, SRR1197325 = L1.2

-   L2 stage larvae: SRR1197425 = L2.1, SRR1197324 = L2.2

-   L3 stage larvae: SRR1197424 = L3.1, SRR1197326 = L3.2

-   pupae, WPP + 2 days: SRR1197420 = P1.1, SRR1197287 = P1.2

-   pupae, WPP + 3 days: SRR1197419 = P2.1, SRR1197285 = P2.2

-   pupae, WPP + 4 days: SRR1197416 = P3.1, SRR1197286 = P3.2

## Load data

```{r}
# Define file names and corresponding column labels
dataset_labels <- list(L1.1 = "SRR1197426", L1.2 = "SRR1197325", 
                       L2.1 = "SRR1197425", L2.2 = "SRR1197324", 
                       L3.1 = "SRR1197424", L3.2 = "SRR1197326", 
                       P1.1 = "SRR1197420", P1.2 = "SRR1197287", 
                       P2.1 = "SRR1197419", P2.2 = "SRR1197285", 
                       P3.1 = "SRR1197416", P3.2 = "SRR1197286")

# Creates a table with gene_id and the expected_count of all datasets
load_and_merge_datasets <- function(folder, file_labels) {
  datasets <- lapply(names(file_labels), function(label) {
    file_path <- paste0(folder, "/", file_labels[[label]], ".genes.results")
    # Extract gene_id and expected_count columns for each dataset 
    data <- read.table(file_path, header = TRUE)[, c("gene_id", "expected_count")]
    colnames(data)[2] <- label
    return(data)
  })
  # Merge all datasets on gene_id
  merged_data <- Reduce(function(x, y) merge(x, y, by = "gene_id", all = TRUE), datasets)
  return(merged_data)
}

# Load and merge datasets for both refGene (Masja's version) and ncbiRefSeq (Julia's version) annotaions
RSEM_counts_refGene <- load_and_merge_datasets("RSEM_refGene", dataset_labels)
RSEM_counts_ncbiRefSeq <- load_and_merge_datasets("RSEM_NCBI", dataset_labels)
```

# Annotations

-   **refGene (Masja):** only the curated subset of RefSeq (UCSC)

-   **ncbiRefSeq (Julia):** complete (curated+predicted) RefSeq database of NCBI

## Verify Consistency of Results with Identical Annotation

Check if we get the same results with the same annotation:

```{r}
control_labels <- list(L1.1 = "SRR1197426", L1.2 = "SRR1197325")
RSEM_counts_Masja <- load_and_merge_datasets("RSEM_refGene", control_labels)
RSEM_counts_Julia <- load_and_merge_datasets("RSEM_refGene_Julia", control_labels)

# Merge both datasets on gene_id, with suffixes to distinguish between the sources
merged_control <- merge(RSEM_counts_Masja, RSEM_counts_Julia, by = "gene_id", all = TRUE, suffixes = c("_Masja", "_Julia"))

# Replace NA values with -1 to handle genes present in only one dataset
merged_control[is.na(merged_control)] <- -1

# Calculate differences for each sample
control_diff <- merged_control
for (sample in names(control_labels)) {
  # Calculate difference for each sample and store in a new column with "_diff" suffix
  control_diff[[paste0(sample, "_diff")]] <- merged_control[[paste0(sample, "_Masja")]] - merged_control[[paste0(sample, "_Julia")]]
}

# Keep only gene_id and the "_diff" columns in the final difference dataframe
control_diff <- control_diff[, c("gene_id", paste0(names(control_labels), "_diff"))]

# Identify rows where all differences are zero (indicating exactly the same expression across all samples)
exactly_same_rows <- rowSums(control_diff[, -1] == 0) == length(control_labels)

# Count the number of rows where all differences are zero
count_exactly_same_rows <- sum(exactly_same_rows)

# Filter out rows with exactly the same expression, keeping only those with differences
control_diff_filtered <- control_diff[!exactly_same_rows, ]

# Display results
cat("Number of genes with different expression across at least one sample:", nrow(control_diff_filtered), "\n")
```

We get exactly the same result for L1 stage larvae when using the same annotation, so that shouldnâ€™t be the reason for the differing results with different annotations.

## Differences because of annotations

**Warning: The code is from ChatGPT, and I haven't checked it in detail since we won't need it in the end. However, I find it interesting that approximately 15% of the genes are differently expressed depending on the annotation, with an average change of 33.87549% (if ChatGPT's code is correct). - Julia :)**

How many genes are only in one annotation?

```{r}
# Identify genes unique to each dataset
genes_refGene_only <- setdiff(RSEM_counts_refGene$gene_id, RSEM_counts_ncbiRefSeq$gene_id)
genes_ncbiRefSeq_only <- setdiff(RSEM_counts_ncbiRefSeq$gene_id, RSEM_counts_refGene$gene_id)

# Calculate absolute counts
count_refGene_only <- length(genes_refGene_only)
count_ncbiRefSeq_only <- length(genes_ncbiRefSeq_only)

# Calculate total gene counts for each dataset
total_genes_refGene <- nrow(RSEM_counts_refGene)
total_genes_ncbiRefSeq <- nrow(RSEM_counts_ncbiRefSeq)

# Calculate proportions
proportion_refGene_only <- count_refGene_only / total_genes_refGene
proportion_ncbiRefSeq_only <- count_ncbiRefSeq_only / total_genes_ncbiRefSeq

# Display results
cat("Genes only in RSEM_counts_refGene:", count_refGene_only, "(", proportion_refGene_only * 100, "% of total)\n")
cat("Genes only in RSEM_counts_ncbiRefSeq:", count_ncbiRefSeq_only, "(", proportion_ncbiRefSeq_only * 100, "% of total)\n")

```

How differently expressed are the genes depending on annotation?

```{r}
# Perform a full join on gene_id to ensure all genes are included in the resulting dataframe
merged_annotations <- merge(RSEM_counts_refGene, RSEM_counts_ncbiRefSeq, by = "gene_id", all = TRUE, suffixes = c("_refGene", "_ncbiRefSeq"))

# Replace NA values with 0 to handle genes present in only one dataset
merged_annotations[is.na(merged_annotations)] <- 0

# Calculate the difference for each sample column
# Select only the gene_id column and the difference between corresponding columns
RSEM_counts_diff <- merged_annotations
sample_columns <- names(dataset_labels)
for (sample in sample_columns) {
  # Calculate difference for each sample and store it in a new column with "_diff" suffix
  RSEM_counts_diff[[paste0(sample, "_diff")]] <- merged_annotations[[paste0(sample, "_refGene")]] - merged_annotations[[paste0(sample, "_ncbiRefSeq")]]
}

# Keep only gene_id and the "_diff" columns in the final dataframe
RSEM_counts_diff <- RSEM_counts_diff[, c("gene_id", paste0(sample_columns, "_diff"))]

# Count genes with exact same expression across all samples
same_expression_genes <- rowSums(RSEM_counts_diff[, -1] == 0) == length(sample_columns)
count_same_expression <- sum(same_expression_genes)

# Count genes with different expression in at least one sample
count_different_expression <- sum(!same_expression_genes)

# Calculate proportions
total_genes <- nrow(RSEM_counts_diff)
proportion_same_expression <- count_same_expression / total_genes
proportion_different_expression <- count_different_expression / total_genes

# Calculate the average proportion difference for genes with different expression
# Filter out genes with same expression
different_expression_genes <- RSEM_counts_diff[!same_expression_genes, ]

# Calculate total expression and difference for each gene across samples in both datasets
total_expression_refGene <- rowSums(merged_annotations[!same_expression_genes, grep("_refGene$", colnames(merged_annotations))])
total_expression_ncbiRefSeq <- rowSums(merged_annotations[!same_expression_genes, grep("_ncbiRefSeq$", colnames(merged_annotations))])

# Calculate the proportion difference for genes with different expression
proportion_differences <- abs(total_expression_refGene - total_expression_ncbiRefSeq) / (total_expression_refGene + total_expression_ncbiRefSeq)

# Calculate the average proportion difference
average_proportion_difference <- mean(proportion_differences, na.rm = TRUE)

# Display results
cat("Number of genes with exact same expression:", count_same_expression, "(", proportion_same_expression * 100, "% of total)\n")
cat("Number of genes with different expression:", count_different_expression, "(", proportion_different_expression * 100, "% of total)\n")
cat("Average proportion difference for genes with different expression:", average_proportion_difference * 100, "%\n")


# Convert proportion_differences to a dataframe with a meaningful column name
proportion_differences_df <- data.frame(ProportionDifference = proportion_differences)
# Calculate absolute differences for genes with different expression
absolute_differences <- abs(total_expression_refGene - total_expression_ncbiRefSeq)

# Add absolute differences to the dataframe
proportion_differences_df$AbsoluteDifference <- absolute_differences

summary(proportion_differences_df)

```

Look at the differences yourself

```{r}
RSEM_different <- RSEM_counts_diff[!same_expression_genes,]
RSEM_different
```

Same, code as above only for the genes that are in both annotations

```{r}
# Load necessary packages
# Assuming data is already loaded in variables `RSEM_counts_refGene` and `RSEM_counts_ncbiRefSeq`

# Step 1: Perform an inner join on gene_id to keep only genes present in both annotations
merged_annotations <- merge(RSEM_counts_refGene, RSEM_counts_ncbiRefSeq, by = "gene_id", suffixes = c("_refGene", "_ncbiRefSeq"))

# Step 2: Calculate expression differences for each sample
# Define sample column names (assumes `dataset_labels` is defined with sample names as keys)
sample_columns <- names(dataset_labels)

# Step 3: Initialize a new data frame to store differences
RSEM_counts_diff <- merged_annotations

# Calculate the difference between `refGene` and `ncbiRefSeq` for each sample
for (sample in sample_columns) {
  # Calculate difference and store it in a new column with "_diff" suffix
  RSEM_counts_diff[[paste0(sample, "_diff")]] <- merged_annotations[[paste0(sample, "_refGene")]] - merged_annotations[[paste0(sample, "_ncbiRefSeq")]]
}

# Step 4: Keep only `gene_id` and the "_diff" columns in the final dataframe
RSEM_counts_diff <- RSEM_counts_diff[, c("gene_id", paste0(sample_columns, "_diff"))]

# Step 5: Count genes with exact same expression across all samples (i.e., all differences are zero)
same_expression_genes <- rowSums(RSEM_counts_diff[, -1] == 0) == length(sample_columns)
count_same_expression <- sum(same_expression_genes)
RSEM_different <- RSEM_counts_diff[!same_expression_genes,]

# Count genes with different expression in at least one sample
count_different_expression <- sum(!same_expression_genes)

# Step 6: Calculate proportions
total_genes <- nrow(RSEM_counts_diff)
proportion_same_expression <- count_same_expression / total_genes
proportion_different_expression <- count_different_expression / total_genes

# Step 7: Calculate the average proportion difference for genes with different expression
# Filter out genes with same expression
different_expression_genes <- RSEM_counts_diff[!same_expression_genes, ]

# Calculate total expression and difference for each gene across samples in both datasets
total_expression_refGene <- rowSums(merged_annotations[!same_expression_genes, grep("_refGene$", colnames(merged_annotations))])
total_expression_ncbiRefSeq <- rowSums(merged_annotations[!same_expression_genes, grep("_ncbiRefSeq$", colnames(merged_annotations))])

# Calculate the proportion difference for genes with different expression
proportion_differences <- abs(total_expression_refGene - total_expression_ncbiRefSeq) / (total_expression_refGene + total_expression_ncbiRefSeq)

# Calculate the average proportion difference
average_proportion_difference <- mean(proportion_differences, na.rm = TRUE)

# Display results
cat("Number of genes with exact same expression:", count_same_expression, "(", proportion_same_expression * 100, "% of total)\n")
cat("Number of genes with different expression:", count_different_expression, "(", proportion_different_expression * 100, "% of total)\n")
cat("Average proportion difference for genes with different expression:", average_proportion_difference * 100, "%\n")

# Step 8: Convert proportion_differences to a dataframe with a meaningful column name
proportion_differences_df <- data.frame(ProportionDifference = proportion_differences)

# Calculate absolute differences for genes with different expression
absolute_differences <- abs(total_expression_refGene - total_expression_ncbiRefSeq)

# Add absolute differences to the dataframe
proportion_differences_df$AbsoluteDifference <- absolute_differences

# Step 9: Summary statistics
summary(proportion_differences_df)

```

And now only for genes with a bigger difference

```{r}
# Load necessary packages
# Assuming data is already loaded in variables `RSEM_counts_refGene` and `RSEM_counts_ncbiRefSeq`

# Step 1: Perform an inner join on gene_id to keep only genes present in both annotations
merged_annotations <- merge(RSEM_counts_refGene, RSEM_counts_ncbiRefSeq, by = "gene_id", suffixes = c("_refGene", "_ncbiRefSeq"))

# Step 2: Calculate absolute expression differences for each sample
# Define sample column names (assumes `dataset_labels` is defined with sample names as keys)
sample_columns <- names(dataset_labels)

# Step 3: Initialize a new data frame to store absolute differences
RSEM_counts_diff <- merged_annotations

# Calculate the absolute difference between `refGene` and `ncbiRefSeq` for each sample
for (sample in sample_columns) {
  # Calculate absolute difference and store it in a new column with "_diff" suffix
  RSEM_counts_diff[[paste0(sample, "_diff")]] <- abs(merged_annotations[[paste0(sample, "_refGene")]] - merged_annotations[[paste0(sample, "_ncbiRefSeq")]])
}

# Step 4: Filter out genes with an absolute difference of less than 1 across all samples
# Keep only rows where there is at least one column with an absolute difference >= 1
filtered_genes <- rowSums(RSEM_counts_diff[, paste0(sample_columns, "_diff")] >= 1) > 0
RSEM_counts_diff <- RSEM_counts_diff[filtered_genes, ]

# Step 5: Keep only `gene_id` and the "_diff" columns in the final dataframe
RSEM_counts_diff <- RSEM_counts_diff[, c("gene_id", paste0(sample_columns, "_diff"))]

# Step 6: Count genes with exact same expression across all samples (i.e., all differences are zero)
same_expression_genes <- rowSums(RSEM_counts_diff[, -1] == 0) == length(sample_columns)
count_same_expression <- sum(same_expression_genes)
RSEM_different <- RSEM_counts_diff[!same_expression_genes,]

# Count genes with different expression in at least one sample
count_different_expression <- sum(!same_expression_genes)

# Step 7: Calculate proportions
total_genes <- nrow(RSEM_counts_diff)
proportion_same_expression <- count_same_expression / total_genes
proportion_different_expression <- count_different_expression / total_genes

# Step 8: Calculate the average proportion difference for genes with different expression
# Filter out genes with same expression
different_expression_genes <- RSEM_counts_diff[!same_expression_genes, ]

# Calculate total expression and difference for each gene across samples in both datasets
total_expression_refGene <- rowSums(merged_annotations[filtered_genes, grep("_refGene$", colnames(merged_annotations))])
total_expression_ncbiRefSeq <- rowSums(merged_annotations[filtered_genes, grep("_ncbiRefSeq$", colnames(merged_annotations))])

# Calculate the proportion difference for genes with different expression
proportion_differences <- abs(total_expression_refGene - total_expression_ncbiRefSeq) / (total_expression_refGene + total_expression_ncbiRefSeq)

# Calculate the average proportion difference
average_proportion_difference <- mean(proportion_differences, na.rm = TRUE)

# Display results
cat("Number of genes with different expression:", count_different_expression, "(", proportion_different_expression * 100, "% of total)\n")
cat("Average proportion difference for genes with different expression:", average_proportion_difference * 100, "%\n")

# Step 9: Convert proportion_differences to a dataframe with a meaningful column name
proportion_differences_df <- data.frame(ProportionDifference = proportion_differences)

# Calculate absolute differences for genes with different expression
absolute_differences <- abs(total_expression_refGene - total_expression_ncbiRefSeq)

# Add absolute differences to the dataframe
proportion_differences_df$AbsoluteDifference <- absolute_differences

# Step 10: Summary statistics
summary(proportion_differences_df)

```

## Plots

```{r}

```
